name: Build and Release

on:
  push:
    branches: ["main"]
    paths:
      - "**.dart"
      - "pubspec.lock"
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Version number (example: 1.0.0)'
        required: true
      with_commit:
        description: 'If i wanna commit'
        type: boolean
        default: true
        required: true

jobs:
  last_version:
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.get_latest_version.outputs.version_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Get latest version number
        id: get_latest_version
        run: |
          if [[ -n "${{ github.event.inputs.version_number }}" ]]; then
            VERSION_NUMBER="${{ github.event.inputs.version_number }}"
          else
            VERSION_NUMBER=$(grep -m 1 -oP '## \[\d+\.\d+\.\d+(-\S+)?\]' CHANGELOG.md | sed 's/## \[\(.*\)\]/\1/')
          fi
          echo "version_number=${VERSION_NUMBER}" >> $GITHUB_OUTPUT

      - name: Check if entry exists on CHANGELOG.md
        if: github.event_name == 'workflow_dispatch'
        run: |
          changelog_entry=$(grep -E "^##\s+\[${{ steps.get_latest_version.outputs.version_number }}\]" CHANGELOG.md)
          if [ -z "$changelog_entry" ]; then
            echo "No changelog entry found for version ${{ steps.get_latest_version.outputs.version_number }} in CHANGELOG.md"
            exit 1
          fi

      - name: Update version number
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.version="${{ steps.get_latest_version.outputs.version_number }}"' pubspec.yaml

      - name: Commit new version
        if: github.event.inputs.with_commit == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pubspec.yaml
          git commit -m "${{ steps.get_latest_version.outputs.version_number }}" -m $'\nskip-checks: true' --cleanup=verbatim
          git push origin main

  build:
    needs: [last_version]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary_extension: "-linux"
            pub_cache: "~/.pub-cache"
          - os: windows-latest
            binary_extension: ".exe"
            pub_cache: "~\\.pub-cache"
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Restore Cache dependencies
        id: restore-cache-deps
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
          path: ${{ matrix.pub_cache }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Save Cache dependencies
        uses: actions/cache/save@v3
        if: steps.restore-cache-deps.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.restore-cache-deps.outputs.cache-primary-key }}
          path: ${{ matrix.pub_cache }}

      - name: Compile executable
        run: |
          mkdir binaries
          dart compile exe bin/main.dart -o binaries/run-app${{ matrix.binary_extension }}

      - name: Upload compiled files
        if: ${{ job.status == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: compiled-files
          path: binaries/run-app${{ matrix.binary_extension }}
          retention-days: 1

  release:
    needs: [build, last_version]
    runs-on: ubuntu-latest
    if: ${{ needs.build.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Download compiled files
        uses: actions/download-artifact@v3
        with:
          name: compiled-files
          path: binaries/

      - name: Make executable run binary files
        run: find binaries/ -type f -name 'run-app*' -exec chmod +x {} \;

      - name: Move executables to root path
        run: mv binaries/* .

      - name: Create and push branch (and tag)
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b ${{ needs.last_version.outputs.version_number }}
          git add .
          git commit -m "Add compiled files" --cleanup=verbatim
          git push --set-upstream origin ${{ needs.last_version.outputs.version_number }}
          git tag v${{ needs.last_version.outputs.version_number }}
          git push origin --tags
